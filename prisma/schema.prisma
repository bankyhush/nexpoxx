generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  fullName           String?              @db.VarChar(100)
  phoneNumber        String?              @db.VarChar(20)
  country            String?              @db.VarChar(50)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  inviteCode         String               @unique @db.VarChar(8)
  accountType        String               @default("standard") @db.VarChar(20)
  stoken             String?              @db.VarChar(6)
  walletAddress      String               @unique @db.VarChar(50)
  kycStatus          String               @default("Pending") @db.VarChar(20) // New
  frontImage         String?              @db.VarChar(255)                    // New
  backImage          String?              @db.VarChar(255)                    // New
  verified           Boolean              @default(false)
  current_trader     String?              @db.VarChar(100)
  activeplan         String?              @db.VarChar(100)
  profit             Decimal @default(0.00) @db.Decimal(18, 2)
  deposit            Decimal @default(0.00) @db.Decimal(18, 2)
  withdrawal         Decimal @default(0.00) @db.Decimal(18, 2)
  bonus              Decimal @default(0.00) @db.Decimal(18, 2)
  planamount         Decimal @default(0.00) @db.Decimal(18, 2)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  role               Role                 @default(USER)
  balances           UserBalance[]
  tickets            Ticket[]
  transactionHistory TransactionHistory[]

  @@index([email])
  @@index([walletAddress])
}

enum Role {
  USER
  ADMIN
}

model TransactionHistory {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  status    String
  type      String
  info      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  coinId    Int
  user      User    @relation(fields: [userId], references: [id])
  coin      Coin    @relation(fields: [coinId], references: [id])

  @@index([userId, coinId])
 
}


model Coin {
  id                  Int           @id @default(autoincrement())
  coinName            String        @unique @db.VarChar(50)
  coinTitle           String        @db.VarChar(100)
  coinRate            Decimal       @db.Decimal(10, 3)
  photo               String?       @db.VarChar(255)
  createdAt           DateTime      @default(now())
  withMin             Int?
  withMax             Int?
  withInstructions    String?       @db.Text
  depositInstructions String?       @db.Text
  depositAddress      String?       @db.VarChar(255)
  percent             String?       @db.VarChar(10)
  desc                String?       @db.Text
  coinVisible         Boolean       @default(true)
  balances            UserBalance[]

  @@index([coinName])
  TransactionHistory TransactionHistory[]
}

model Ticket {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  subject   String       @db.VarChar(255)
  status    TicketStatus @default(open)
  isRead    Boolean      @default(false)
  adminRead Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId])
}

enum TicketStatus {
  open
  closed
}

model UserBalance {
  id        Int     @id @default(autoincrement())
  userId    Int
  coinId    Int
  user      User    @relation(fields: [userId], references: [id])
  coin      Coin    @relation(fields: [coinId], references: [id])
  available Decimal @default(0.00) @db.Decimal(18, 2)
  onOrder   Decimal @default(0.00) @db.Decimal(18, 2)
  staked    Decimal @default(0.00) @db.Decimal(18, 2)

  @@unique([userId, coinId])
  @@index([userId, coinId])
}

model CopyTrader {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  photo        String?  @db.VarChar(255)
  noTrades     String   @db.VarChar(50)
  noCopiers    String   @db.VarChar(50)
  status       String   @db.VarChar(20)
  noWins       String   @db.VarChar(50)
  rank         String   @db.VarChar(50)
  strategyDesc String?  @db.Text
  noLoss       String   @db.VarChar(50)
  profit       String   @db.VarChar(50)
  loss         String   @db.VarChar(50)
  edate        String   @db.VarChar(50)
  commission   String   @default("100") @db.VarChar(10)
  createdAt    DateTime @default(now())

  @@index([name])
}


model Plan {
  id                 Int      @id @default(autoincrement())
  plan_name          String   @db.VarChar(100)
  plan_des           String   @db.Text
  min_ins            String   @db.VarChar(100)
  max_ins            String   @db.VarChar(100)
  days_duration      String   @db.VarChar(100)
  daily_interest     String   @db.VarChar(100)
  status             String   @default("Active") @db.VarChar(10)
  @@map("plan") // optional, maps to the exact table name in MySQL if it's `plan`
}


model Staking {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(100)
  title     String @db.VarChar(100)
  photo     String @db.VarChar(255)
  duration  String @db.VarChar(50)
  roi       String @db.VarChar(50)
  min       String @db.VarChar(50)
  max       String @db.VarChar(50)

  @@map("staking") // Optional: maps Prisma model to MySQL table name
}

model Signal {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  price    String @db.VarChar(50)
  strength String @db.VarChar(50)

  @@map("signals") // Optional: match exact DB table name
}
