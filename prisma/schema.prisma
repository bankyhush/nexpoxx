// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing user data, including authentication and wallet details
model User {
  id            Int           @id @default(autoincrement())
  fullName      String?       @db.VarChar(100)
  phoneNumber   String?       @db.VarChar(20) // Optional phone number
  country       String?       @db.VarChar(50) // Optional country
  email         String        @unique @db.VarChar(255)
  password      String        @db.VarChar(255) // Hashed password
  inviteCode    String        @unique @db.VarChar(8) // Unique code for referrals
  accountType   String        @default("standard") @db.VarChar(20) // e.g., standard, premium
  stoken        String?       @db.VarChar(6) // OTP for email verification or password reset
  walletAddress String        @unique @db.VarChar(50) // Unique wallet address
  createdAt     DateTime      @default(now())
  balances      UserBalance[] // Relation to user balances for each coin
  tickets       Ticket[] // Relation to support tickets

  @@index([email]) // Index for faster email lookups
  @@index([walletAddress]) // Index for faster wallet address lookups
}

// Coin model for storing cryptocurrency details with real-time price
model Coin {
  id                  Int           @id @default(autoincrement())
  coinName            String        @unique @db.VarChar(50) // e.g., bitcoin, ethereum
  coinTitle           String        @db.VarChar(100) // Display name, e.g., Bitcoin (BTC)
  coinRate            Decimal       @db.Decimal(10, 3) // Real-time price, updated via API
  photo               String?       @db.VarChar(255) // URL to coin logo
  createdAt           DateTime      @default(now()) @updatedAt
  withMin             String?       @db.VarChar(50) // Minimum withdrawal amount
  withMax             String?       @db.VarChar(50) // Maximum withdrawal amount
  withInstructions    String?       @db.Text // Withdrawal instructions
  depositInstructions String?       @db.Text // Deposit instructions
  depositAddress      String?       @db.VarChar(255) // Deposit address for the coin
  percent             String?       @db.VarChar(10) // Percentage for fees or staking
  coinVisible         Boolean       @default(true) // Whether coin is visible to users
  balances            UserBalance[] // Relation to user balances

  @@index([coinName]) // Index for faster coin lookups
}

// Support ticket model for user inquiries
model Ticket {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  subject   String       @db.VarChar(255)
  status    TicketStatus @default(open)
  isRead    Boolean      @default(false) // User read status
  adminRead Boolean      @default(false) // Admin read status
  createdAt DateTime     @default(now()) @updatedAt

  @@index([userId]) // Index for faster user-based queries
}

enum TicketStatus {
  open
  closed
}

// UserBalance model to track user balances for each coin
model UserBalance {
  id        Int     @id @default(autoincrement())
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int
  coin      Coin?   @relation(fields: [coinId], references: [id])
  coinId    Int
  available Decimal @default(0.00) @db.Decimal(18, 2) // Available balance
  onOrder   Decimal @default(0.00) @db.Decimal(18, 2) // Balance locked in orders
  staked    Decimal @default(0.00) @db.Decimal(18, 2) // Staked balance

  @@unique([userId, coinId]) // Ensure one balance per user-coin pair
  @@index([userId, coinId]) // Index for faster balance queries
}

// CopyTrader model for copy trading feature
model CopyTrader {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100) // Trader's name
  photo        String?  @db.VarChar(255) // Trader's profile picture
  noTrades     String   @db.VarChar(50) // Number of trades
  noCopiers    String   @db.VarChar(50) // Number of users copying
  status       String   @db.VarChar(20) // e.g., active, inactive
  noWins       String   @db.VarChar(50) // Number of winning trades
  rank         String   @db.VarChar(50) // Trader rank
  strategyDesc String?  @db.Text // Trading strategy description
  noLoss       String   @db.VarChar(50) // Number of losing trades
  profit       String   @db.VarChar(50) // Total profit
  loss         String   @db.VarChar(50) // Total loss
  edate        String   @db.VarChar(50) // End date for trading period
  commission   String   @default("100") @db.VarChar(10) // Commission percentage
  createdAt    DateTime @default(now())

  @@index([name]) // Index for faster trader lookups
}
